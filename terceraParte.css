/* --- OUTLINE ---
Es una propiedad recortada por que es el conjunto de otras propiedades
No ocupa un espacio real en el dom
El border ocupa un lugar real, mientras que outline no
*/

/*
.caja1 {
    width: 200px;
    height: 200px;
    background: green;
    margin: auto;
    border: 10px solid blue; usar outline en lugar de border
    box-sizing: content-box;
}

.caja2 {
    width: 200px;
    height: 200px;
    background: yellow;
    margin: auto;
}
*/

/* --- POSITION ---
    --------------
- Static
- Relative, adquiere las propiedades top, bottom, left, right, zindex 
Las propiedades top y left son las mas importantes en posicion
--- EJEMPLO 1 ---
div {
    width: 120px;
    height: 120px;
    display: block;
    background: green;
}
.caja1 {
    background-color: red;

}

.caja2 {
    background-color: green;
    position: relative;
    top: 30px;
    left: 20px;   
    z-index: 50;
    
}

.caja3 {
    background-color: yellow;  
    position: relative; 
    z-index: 1;
}

.caja4 {
    background-color: rebeccapurple;   
}

--- EJEMPLO 2 ---
.contenedor {
    width: 300px;
    height: 300px;
    background: blue;
    margin: 40px;
    position: relative;
  
}

.hijo {
    background: green;
    height: 120px;
    width: 120px;
    position: relative;
    top: -20px;
    left: -20px;
    z-index: -1;
}

- Absolute, tiene 3 diferencias con position relative
Con absolute el esapcio reservado ahora no lo es
Con esta posicion el ancho y lago se ajusta a su contenido si no le damos un heigt y width
Todas las cajas parten del mismo lugar para posicionar
Cuando hacemos que un elemento sea absoluto no reserva su elemento que ocupa en el flujo,
el punto de referencia sera el viewport o el contenedor si esta posicionado
-- EJEMPLO ABSOLUTE --
div {
    display: block;
    background: grey;
    position: absolute;
}

div div {
    height: 100px;
    width: 100px;
    background: yellow;
}

.contenedor {
    position: relative;
    border: 7px solid red;
    margin: 50px auto;
    height: 450px;
    width: 450px;
}


.caja1 {
    right: 0;
    bottom: 0;
}

.caja2 {
    right: 0;
}

.caja3 {
    top: 0;
}

.caja4 {
    bottom: 0;
}

.caja5 {
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    margin: auto;
}

- Fixed, exactamente igual que absoluto pero queda fijo en un lugar, ya no ocupa espacio en pantalla
tiene mismas propiedades pero hay una diferencia, CON EL SCROLL QUEDA FIJO
-- EJEMPLO --
body {
    padding-top: 100px;
}

.caja-fixed {
    background: green;
    position: fixed;
    margin-top: -100px;
}
- Sticky, es una mezcla entre relative y fixed. Esto si mantiene el espacio que se reserva, lo reserva
se comporta con un fixed cuando le decimos donde comportarce asi
--- EJEMPLO STICKY ---
* {
    font-family: 'Comforter', cursive;
    font-weight: 100px;
    font-size: 40px;
}


.caja-fixed {
    background: green;
    position: sticky;
    top: 0;
    margin-top: 50px;
}


Z-INDEX solo en elementos posicionados, pero tiene gran conflicto entre padres e hijos
 
*/

* {
    font-family: 'Comforter', cursive;
    font-weight: 100px;
    font-size: 40px;
}

/*---- DISPLAY -----
Modifica el comportamiento de las cajas, hablamos de relaciones
En los inline no se puede modificar alto y ancho, solo en los block 
- Block, los que ya vimos
- Inline, generalmente para textos
- Inline-block, con este podemos modificar las dimenciones de la caja, con el block no, ancho y alto.

- Table, ESTAS YA CASI NO SE USAN
- Inline-table
- List-item
- table-cell
- table-row
- table-column

La convinacion de ambas hace que podamos hacer casi cualquier cosa, las vemos mas adelante
- flex
- grid

- inline-flex
- inline-grid
*/

/* ---OVERFLOW ---
Es lo que sobra, Â¿que hacemos con lo que sobra?
Tenemos "y" y "x" overflow-x con propiedades como auto, scroll, hidden

div {
    margin: auto;
    margin-top: 50px;
    width: 320px;
    height: 320px;
    border: 6px solid green;
    background: yellow;
    overflow: auto;
}
*/

/*---- FLOAT ----- 3:02:09 video 
Es como antes se dividian los bloques, pero ya quedo atras, ahora se usa Grid y Flex
Funciona solo para darle un buen efecto a textos con imagen, el texto envuelve la imagen

PRIMER EJEMPLO DE FLOAT, YA NO SE UTILIZA
.contenedor div {
    width: 50%;
    float: right;
}

.primario {
    background: red;
}

.secundario {
    background: yellow;
}

--- EJEMPLO DE FLOAT, DONDE ACTUALMENTE SE PUEDE UTILIZAR ---
.cont {
    margin: auto;
    margin-top: 50px;
    border: 5px solid red;
    background: grey;
    width: 50%;
    padding: 20px;
}

.cont img {
    float: left;
    width: 300px;
    margin-right: 20px;
}

*/

.cont {
    margin: auto;
    margin-top: 50px;
    border: 5px solid red;
    background: grey;
    width: 50%;
    padding: 20px;
}

.cont img {
    float: left;
    width: 300px;
    margin-right: 20px;
}
